# !!! WARNING !!!
# All the code from that exercise will be checked automatically. Don't change
# function's names or arguments - otherwise your hometask won't be accepted!
"""
The students party!
In this exercise we will be organizing your party for students, who were graduated.
Please implement the function's logic according to the description
"""

COURSE_GRADE_MAX = 500
students = [
    {
        "student_id": 1,
        "first_name": "Arthur",
        "last_name": "Pendragon",
        "total_mark": 420,
    },
    {"student_id": 2, "first_name": "Guinevere", "last_name": None, "total_mark": 301},
    {"student_id": 3, "first_name": "Morgan", "last_name": "le Fay", "total_mark": 520},
    {
        "student_id": 4,
        "first_name": "Lancelot",
        "last_name": "du Lac",
        "total_mark": 140,
    },
    {
        "student_id": 5,
        "first_name": "Merlin",
        "last_name": "Hernandez",
        "total_mark": 500,
    },
]

max_student_id = max(student["student_id"] for student in students)


# Create new unique id for the next student
def generate_student_id() -> int:
    global max_student_id
    max_student_id += 1
    return max_student_id


# Add student to the list, id must be autogenerated and unique
def create_student(first_name: str, last_name: str, total_mark: int) -> dict:
    new_student = {
        "student_id": generate_student_id(),
        "first_name": first_name,
        "last_name": last_name,
        "total_mark": total_mark,
    }
    students.append(new_student)
    return new_student


# Find student by ID and remove them from the list.
# Raise an Exception if the student is not found.
def remove_student_by_id(student_id: int) -> bool:
    global students
    for student in students:
        if student["student_id"] == student_id:
            students.remove(student)
            return True
    raise Exception(f"Student with ID {student_id} is missing")


# Update information about the student, but `student_id` cannot be changed.
def update_student(student_id: int, **kwargs) -> bool:
    for student in students:
        if student["student_id"] == student_id:
            for key, value in kwargs.items():
                if key != "student_id":
                    student[key] = value
            return True
    return False  # Return False if student ID is not found


# Check if the student is invited (they must have at least 250 points)
def is_student_invited(student: dict) -> bool:
    return student["total_mark"] >= 250


# Notify that the student has failed the course
def notify_student_failed_course(student: dict) -> None:
    print(f"Student {student['first_name']} {student['last_name']} has failed the course.")


# Process the list and determine who is invited or failed
def get_invited_students(students: list, invitation_rating_grade: int = 250) -> list:
    invited_students = []
    for student in students:
        if is_student_invited(student):
            invited_students.append(student)
        else:
            notify_student_failed_course(student)
    return invited_students
